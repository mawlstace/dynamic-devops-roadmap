name: CI

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  semgrep:
    name: semgrep/ci
    runs-on: ubuntu-latest
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: semgrep/semgrep
    if: (github.actor != 'dependabot[bot]')
    steps:
      - uses: actions/checkout@v4
      - run: semgrep ci

  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0
        
      - name: Set up Python
        uses: actions/checkout@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install all requirements including test dependencies
          pip install -r requirements.txt
          # Install linting tools
          pip install pylint
          # Install Hadolint
          wget -O hadolint "https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64"
          chmod +x hadolint
          sudo mv hadolint /usr/local/bin/
      
      - name: Run tests with coverage
        run: |
          python -m pytest test_app.py --cov=. --cov-report=xml 

      - name: Lint Python code
        run: |
          pylint main.py  || exit 0 

      - name: Lint Dockerfile
        run: |
          hadolint Dockerfile || exit 0

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args:
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.qualitygate.wait=false
            # Setting qualitygate.wait=false because free tier only allows main branch analysis
            # Example API response for non-main branches:
            # curl -s -u ${SONAR_TOKEN}: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=project_key&branch=develop"
            # {"errors":[{"msg":"Organization is not allowed to access data from non main branches."}]}
            
      - name: Wait for Quality Gate
        run: |
          sleep 5  # Give SonarQube time to process
          response=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: ${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=${{ secrets.SONAR_PROJECT_KEY }})
          status=$(echo $response | jq -r .projectStatus.status)
          echo "Quality Gate Status: $status"
          
          if [ "$status" = "ERROR" ]; then
            echo "Quality Gate failed"
            echo "Details: $response"
            exit 1
          fi
        # the Qaulity Gate status is None as it is not available for non-main branches. 
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'mawlstace/beekeeper-api:latest'
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'


      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'k8s'
          iac_version: 'v1'
          policy_type: 'k8s'
          only_warn: true
          sarif_upload: true
          scan_path: '.'

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
          
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: mawlstace/beekeeper-api:latest,mawlstace/beekeeper-api:${{ github.sha }}
          cache-from: type=registry,ref=mawlstace/beekeeper-api:buildcache
          cache-to: type=registry,ref=mawlstace/beekeeper-api:buildcache,mode=max

      - name: Integration Tests
        run: |
          docker run -d -p 8000:8000 mawlstace/beekeeper-api:latest
          sleep 5 # Wait for container startup
          # check apis 
              curl -f http://localhost:8000/version
              curl -f http://localhost:8000/temperature
              curl -f http://localhost:8000/metrics
          # Additional API tests
          pytest integration_tests/

      - name: Run integration tests
        continue-on-error: true
        run: |
          # Run only integration tests
          python -m pytest integration_tests/ -v
